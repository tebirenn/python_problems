

#---------- Easy A ----------#

# Создание двух требуемых множеств
set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}

# Для того чтобы объеденить два множества воспользуемся методом union()
res = set1.union(set2)
print(res)





#---------- Easy B ----------#

# Создание двух требуемых множеств
set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}

# Для того чтобы найти пересечение двух множеств воспользуемся методом intersection()
res = set1.intersection(set2)
print(res)






#---------- Easy C ----------#

# Создание двух требуемых множеств
set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}

# Для того чтобы найти разность двух множеств воспользуемся методом difference()
res1 = set1.difference(set2)   # Находим разность первого множества от второго
res2 = set2.difference(set1)   # Находим разность второго множества от первого

print(res1)
print(res2)





#---------- Easy D ----------#

# Чтобы принять множество с консоли всего лишь нужно принять список и конвертировать его в множество
res = set(input().split())
print(res)




#---------- Medium A ----------#

word = input("word: ")       # Принимаем строку

res = set(word)              # Конвертировав строку в множество мы получим множество символов строки
print(len(res))              # Выводим количество оставшихся символов(после удаления повторяющихся символов)
print(*res)                  # Выводим сами оставшиеся символы





#---------- Medium B ----------#

cnt_client = int(input())           # Количество посетителей
clients = set(input().split())      # Сами клиенты

# Отняв от общего количества клиентов длину множества клиентов
# узнаем сколько имен было повторно указано
res = cnt_client - len(clients)
print(res)
 





#---------- Medium C ----------#

number = abs(int(input("Number: ")))            # Через abs() сразу избавляем от знака "-" (если он есть)

digits = set()                                  # Пустое множество для цифр

while True:

    digits.add(number % 10)     # Через метод add() добавили последнюю цифру числа
    number //= 10               # Через целочисленное деление на 10 избавляемся от последней цифры
                                # Таким образом цикл отработает пока числе не останеться только ноль

    if number == 0:
        break


print(*sorted(digits))          # Выводим отсортированное множество





#---------- Hard A ----------#

sentence = input()          # Принимаем строку
letters = set()             # Пустое множество для букв

for symbol in sentence:     # Итерируем все символы строки sentence

    if symbol.isalpha():    # Если символ является буквой
        letters.add(symbol) # Этот символ добавляемся в множество


# чтобы отсортировать заново используем функцию sorted()
# для того чтобы сортировка была по убыванию, параметр reverse указываем True
print(*sorted(letters, reverse=True)) 





#---------- Hard B ----------#

attendance = set()          # Множество для студентов которые присутствовали
all_in_list = set()         # Множество для студентов из списка

n = int(input("Количество студентов которые присутствовали: "))
for i in range(n):          # Цикл на n раз
    name = input()          # Принимаем имя студента
    attendance.add(name)    # Добавляем имя в нужное множество

m = int(input("Количество студентов которые были в списке: "))
for i in range(n):          # Цикл на m раз
    name = input()          # Принимаем имя студента
    attendance.add(name)    # Добавляем имя в нужное множество

# Чтобы узнать о тех кто не пришли на пару, рассмотрим разность списка от тех кто присутствовал
absences = all_in_list.difference(attendance)

# Чтобы узнать о чужаках, рассмотрим разность тех кто присутствовал от тех кто в списке
imposters = attendance.difference(all_in_list)

print("ABSENCE:")
print(*absences, sep="\n")

print("\nIMPOSTER:")
print(*imposters, sep="\n")







#---------- Hard C ----------#

unique = set()          # для уникальных подарков
repeat = set()          # для повторяющихся подарков

gifts = input().split()         # принимаем список подарков

for gift in gifts:              # Итерируем каждый подарок в списке gifts

    # Если подарок раньше не встречался, то добавим в множество уникальных
    if gift not in unique:
        unique.add(gift)
    # Иначе добавим в множество уже подаренных
    else:
        repeat.add(gift)


# Выводим список уникальных подарков, предварительно убрав оттуда подарки которые есть в множестве repeat через метод difference
print(unique.difference(repeat))
print(repeat)