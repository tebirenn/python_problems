
#---------- Easy A ----------#

numbers = list(map(int, input().split()))   # Принимаем список чисел
res = []                                    # Список для нужных чисел

for i in range(1, len(numbers)):            # Итерацию начинаем с 1, потому что нулевой элемент не имеет предыдущего элемента
    current_el = numbers[i]                 # Текущий элемент будет под текущим индексом
    previous_el = numbers[i-1]              # А предыдущий на один индекс ниже чем текущий индекс

    if current_el > previous_el:            # Если текущий элемент выше предыдущего
        res.append(current_el)              # добавляем его в новый список

print(res)





#---------- Easy B ----------#

numbers = list(map(int, input().split()))   # Принимаем список чисел

even_nums = []                              # Список только для четных чисел

for el in numbers:                          # Итерируем вводимый список
    if el % 2 == 0:                         # Если элемент четный
        even_nums.append(el)                # То добавляем в список четных

if even_nums:                               # Если список имеет хоть 1 элемент
    print(max(even_nums))                   # Можно найти максимальный
else:       
    print("Error")                          # Иначе нет





#---------- Medium A ----------#

d = { 
    "OOP": [81,88,72,97], 
    "ICT": [78,69,86,98],
    "MATH": [65,69,78,98], 
    "PHYS": [87,99,66,70]
}

for k, v in d.items():          # Итерируем ключ(Название предмета) и значение(Список оценкок по предмету)
    # Перезаписываем значение в ключе на среднее значение списка
    d[k] = sum(v) / len(v)

print(d)





#---------- Medium B ----------#

text = input()                          # Принимаем строку

first = text.find("h")                  # Находим индекс первой буквы h
last = text.rfind("h")                  # Находим индекс последней буквы h

first_part = text[:first]               # Первый срез будет от начала до первой буквы h
middle_part = text[last:first-1: -1]    # Второй срез будет от последней буквы h по первой(шагом назад)
last_part = text[last+1:]               # Третий срез будет после последней h и до конца

# Выводим обратно соеденяя все три части
print(first_part + middle_part + last_part)





#---------- Hard A ----------#

numbers = list(map(int, input().split()))   # Принимаем список чисел

odd_nums = []                               # Список для нечётных чисел 

for el in numbers:                         # Итерируем список чисел
    if el % 2 != 0:                         # Проверяем на нечетность
        odd_nums.append(el)                 # Если проверка верная добавляем число в список нечетных 

if odd_nums:                                # Если список имеет хоть один элемент
    max_el = max(odd_nums)                  # Находим максимальный среди нечетных
    print("Число:", max_el, end=" ")        # Выводим макс элемент
    
    sum_of_digits = 0                       # Переменная для суммирования цифр максимального числа  
    for digit in str(max_el):               # Так как int не сможем итерировать, итерируем его в виде строки
        sum_of_digits += int(digit)         # Плюсуем каждую цифру в сумму(обратно конвертировав в тип int)

    print("Сумма:", sum_of_digits)          # Выводим сумму

else:                                      # Иначе список пуст                          
    print("Error")                         # Максимальный найти не удаться





#---------- Hard B ----------#

n = int(input("Количество учащихся с++: "))
m = int(input("Количество учащихся python: "))

# Множества для каждой группы
cpp = set()         
python = set()

for i in range(n):      # Цикл на n раз
    name = input()      # Принимаем имя ученика
    cpp.add(name)       # Добавляем в группу c++

for i in range(m):      # Цикл на m раз
    name = input()      # Принимаем имя ученика
    python.add(name)    # Добавляем в группу c++


# Вычисляем различия двух списков сразу, таким образом найдем учеников только одной группы
res = python.symmetric_difference(cpp)
print(len(res))         # Выводим количество учащихся только в одной группе
