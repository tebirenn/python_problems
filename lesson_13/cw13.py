

#---------- Easy A ----------#

numbers = list(map(int, input().split()))   # Принимаем список чисел
summa = sum(numbers)                        # Вычисляем сумму чисел

if summa > 10:                              # Если сумма больше 10
    print("More")
elif summa < 10:                            # Иначе если сумма меньше 10
    print("Less")
else:                                       # Иначе(на еlse дойдет если сумма не больше и не меньше, а равно к 10)
    print("Equal")





#---------- Easy B ----------#

# Принимаем две строки
name = input("Имя домена: ")   
zone = input("Зона домена: ")

# Выводим формотировав в нужную строку
print(f"http://www.{name}.{zone}/")





#---------- Easy C ----------#

sentence = input()          # Принимаем строку
symbols = set(sentence)     # Конвертируем его в множество(Таким образом избавимся от повторяющихся символов)
print(len(symbols))         # Выводим количество символов во множестве





#---------- Easy D ----------#

words = input().split()         # Принимаем список слов 
lenghts = {}                    # Словарь где ключ-слово, значние-длина слова

for word in words:              # Итерируем слова в списке
    lenghts[word] = len(word)   # Слово как ключ, его длину как значение добавили в словарь

for word, l in lenghts:         # Выводим все данные в словаре с помощью итераций
    print(f"{word}-{l}")





#---------- Medium A ----------#

my_list = input().split()      # Принимаем список

print(*my_list[1: :2])         # Срезаем начиная с первого индекса, до конца, с шагом 2





#---------- Medium B ----------#

string = input().lower()                    # Принимаем строку(в нижний регистр сразу переводим)
alphabet = "abcdefghijklmnopqrstuvwxyz"     # Строка алфавит

if string == alphabet[ :len(string)]:       # Если наша строка из трех букв, срезаем первые три буквы из алфавите и сравниваем их
    print("good")                           # Если равны то вводимая строка идёт по алфавиту
else:
    print("cringe")                         # Иначе нет





#---------- Medium C ----------#

journal = {}                        # Словарь где ключ это имя студента, значение лучшая оценка студента

n = int(input("n: "))               # Количество студентов
for i in range(n):                  # Цикл на n раз
    name, grade = input().split()   # Принимаем с консоли два значения: имя и оценку
    grade = int(grade)              # grade у нас в типе str, переводим в int

    if name not in journal.keys():  # Если студента раньше не было в журнале, то он впервые получил оценку
        journal[name] = grade       # Просто добавляем их в словарь

    # Если дело дошло до elif, студент уже есть в журнале и у него уже есть некая оценка
    elif grade > journal[name]:     # Проверяем новая оценка будет ли лучше старой
        journal[name] = grade       # Если да то перезаписываем значение в ключе





#---------- Hard A ----------#

numbers = list(map(int, input().split()))   # Принимаем список из Int
spec_number = int(input())                  # Специальное число

for i in range(0, len(numbers)):            # Цикл начинающеся с нуля до конечного индекса
    for j in range(i+1, len(numbers)):      # Цикл начинается с индекса после i до конечного индекса

        # У нас есть два индекса, через них обращаемся к значениям элементов и суммируем их
        # Если сумма получиться равна к специальному числу, выводим два значения
        if numbers[i] + numbers[j] == spec_number:
            print(numbers[i], numbers[j])





#---------- Hard B ----------#

numbers = list(map(int, input().split()))   # Принимаем список из Int
unique = set(numbers)                       # Чтобы узнать какие числа уникальны, конвертируем в множество
print(*unique)





#---------- Hard C ----------#

names = input().split()       # Принимаем список из строк

names.sort()                            # Сначала отсортируем по обыному(по ASCII)
names.sort(key=len, reverse=True)       # Далее сортируем по длине по убыванию

# Изза того что первым сортировали по ASCII, при сортировке по длине, элементы с равной длиной остануться в таком же порядке
print(*names)