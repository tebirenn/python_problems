#---------- Easy A ----------#

def reverse_int(number: int, res=0) -> int:
    if number == 0:         # Число будет постепенно целочисленно делиться на 10
        return res          # Когда дойдет до 0, завершаем функцию возвращая res
    else:                   # Иначе вызывем функию, целочисленно поделив число на 10(избавляемся от последней цифры)
                            # и в качестве res будет res * 10 + [последняя цифра]
                            # Например: res=54, посл. цифра 7, по такой формуле мы получим 547. (Последнюю цифру добавили в конец)
        return reverse_int(number//10, res*10 + number%10)

n = int(input("Число: "))
print(f"{n} => {reverse_int(n)}")





#---------- Medium A ----------#

# Функция получает x(основа), y(степень)
def my_pow(x:int|float, y: int) -> int|float:
    if y == 0:                      # У любого число степень 0 это 1
        return 1
    else:                           # Если какой то другой степень
        return x * my_pow(x, y-1)   # то вспомним что (4**9) это тоже самое что (4) * (4**8)

a, b = int(input("Основа: ")), int(input("Степень: "))
print(f"{a}^{b}={my_pow(a, b)}")





#---------- Hard A ----------#

# lenght(длина последовательности), num(Число нужный для print), cnt(количество числа num)
def mono_seq(lenght, num=1, cnt=0) -> None:
    if lenght == 0:                     # Если длина последовательности достигло 0
        return                          # Нужно остановиться
    elif cnt < num:                     # Если количество числа num меньше чем сам num
        print(num, end=" ")             # значит число должно еще печататься
        mono_seq(lenght-1, num, cnt+1)  # Вызываем функцию с меньшей длиной, с таким же num, с большим количеством num
    else:                               # Иначе переходим на след. число
        mono_seq(lenght, num+1, cnt)    # Вызываем функцию с той же длиной(потому что вывода числа не было), num увеличивается, cnt обнуляется

k = int(input("Длина последовательности: "))
print("Монотонная последовательность длинною", k)
mono_seq(k)